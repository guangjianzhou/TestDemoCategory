1.关于是否登录判断
    tabbarVC 中代理
#pragma mark - 检查是否登录
    - (BOOL)tabBarController:(UITabBarController *)tabBarController shouldSelectViewController:(UIViewController *)viewController
    {
        if (viewController == tabBarController.viewControllers[2]  && _privateToken == nil)
        {
            LoginViewController *loginViewController = [LoginViewController new];
            UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:loginViewController];
            [((UINavigationController *)tabBarController.selectedViewController) presentViewController:nav animated:YES completion:nil];
            return NO;
        }
        else
        {
            return YES;
        }
    }


rootTabBarController.tabBar.tintColor = [UIColor colorWithRed:55 / 255.0 green:196 / 255.0 blue:242 / 255.0 alpha:1];  //字体颜色
rootTabBarController.tabBar.barTintColor = [UIColor orangeColor]; //
rootTabBarController.tabBar.backgroundColor = [UIColor yellowColor];//

//设置图片渲染模式
UIImage *deselectedImage = [[UIImage imageNamed:@"tabbar_item_home"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
UIImage *selectedImage = [[UIImage imageNamed:@"tabbar_item_home_selected"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
// 底部导航item
UITabBarItem *tabBarItem = [[UITabBarItem alloc] initWithTitle:@"首页" image:nil tag:0];
tabBarItem.image = deselectedImage;
tabBarItem.selectedImage = selectedImage;
self.tabBarItem = tabBarItem;


2.#define kUserTest 1 判断
#if kUserTest
    self.navigationController.navigationBar.translucent = NO;
#else
    if([[[UIDevice currentDevice]systemVersion]floatValue]>=7.0)
    {
        self.parentViewController.edgesForExtendedLayout = UIRectEdgeNone;
        self.parentViewController.automaticallyAdjustsScrollViewInsets = YES;
    }
#endif

3. 适配iOS7uinavigationbar遮挡tableView的问题
    if([[[UIDevice currentDevice] systemVersion] floatValue] >= 7.0)
    {
        self.edgesForExtendedLayout = UIRectEdgeNone;
        self.automaticallyAdjustsScrollViewInsets = NO;
    }

4.uitabbar自定义
{
    self.tabBar.translucent = NO;
    self.viewControllers = @[
            [self addNavigationItemForViewController:newsSVC],
            [self addNavigationItemForViewController:tweetsSVC],
            [UIViewController new],
            discoverNav,
            homepageNav,
    ];

    NSArray *titles = @[@"综合", @"动弹", @"", @"发现", @"我"];
    NSArray *images = @[@"tabbar-news", @"tabbar-tweet", @"", @"tabbar-discover", @"tabbar-me"];
    [self.tabBar.items enumerateObjectsUsingBlock:^(UITabBarItem *item, NSUInteger idx, BOOL *stop) {
        [item setTitle:titles[idx]];
        [item setImage:[UIImage imageNamed:images[idx]]];
        [item setSelectedImage:[UIImage imageNamed:[images[idx] stringByAppendingString:@"-selected"]]];
    }];

    [self.tabBar.items[2] setEnabled:NO];
    //第三按钮进行自定义
    [self addCenterButtonWithImage:[UIImage imageNamed:@"tabbar-more"]];
    [self.tabBar addObserver:self
    forKeyPath:@"selectedItem"
    options:NSKeyValueObservingOptionOld | NSKeyValueObservingOptionNew
    context:nil];
}

-(void)addCenterButtonWithImage:(UIImage *)buttonImage
{
    _centerButton = [UIButton buttonWithType:UIButtonTypeCustom];

    CGPoint origin = [self.view convertPoint:self.tabBar.center toView:self.tabBar];
    CGSize buttonSize = CGSizeMake(self.tabBar.frame.size.width / 5 - 6, self.tabBar.frame.size.height - 4);

    _centerButton.frame = CGRectMake(origin.x - buttonSize.height/2, origin.y - buttonSize.height/2, buttonSize.height, buttonSize.height);

    [_centerButton setCornerRadius:buttonSize.height/2];
    [_centerButton setBackgroundColor:[UIColor colorWithHex:0x24a83d]];
    [_centerButton setImage:buttonImage forState:UIControlStateNormal];
    [_centerButton addTarget:self action:@selector(buttonPressed) forControlEvents:UIControlEventTouchUpInside];

    [self.tabBar addSubview:_centerButton];
}

5.小型表情图文混排
_didSelectEmoji = ^(NSTextAttachment *textAttachment) {
    NSAttributedString *emojiAttributedString = [NSAttributedString attributedStringWithAttachment:textAttachment];
    NSMutableAttributedString *mutableAttributeString = [[NSMutableAttributedString alloc] initWithAttributedString:textView.attributedText];
    [mutableAttributeString replaceCharactersInRange:textView.selectedRange withAttributedString:emojiAttributedString];
    textView.attributedText = mutableAttributeString;
    textView.textColor = [UIColor titleColor];
    [textView insertText:@""];
    textView.font = [UIFont systemFontOfSize:16];
};

6.plist配置

https-->http 网络请求
App Transport Security Settings
<key>NSAppTransportSecurity</key>
<dict>
<key>NSAllowsArbitraryLoads</key>
<true/>
</dict>

调用的URL scheme列为白名单(微信 qq 等app)
URL Scheme来调起你的APP的请求

<key>LSApplicationQueriesSchemes</key>
<array>
    <string>wechat</string>
    <string>weixin</string>
    <string>sinaweibohd</string>
    <string>sinaweibo</string>
    <string>sinaweibosso</string>
    <string>weibosdk</string>
    <string>weibosdk2.5</string>
    <string>mqqapi</string>
    <string>mqq</string>
</array>

URL-Type 别人使用固定格式 调起APP

7.使用两个开发环境: 开发、测试



8.主题切换 appearance 、TintColor

UIAppearance 设置UI全局效果，实现自定义效果又能简单的实现
TintColor是描述线条轮廓的一种颜色,该颜色默认具有传递性,默认状态下最底部的视图的tintcolor会一直往上面的视图传递


9.全程统一的ErrorVC

10.特殊技巧
self.view.endEditing = YES ;//收缩键盘
//设置标题栏不能覆盖下面viewcontroller的内容
self.edgesForExtendedLayout = UIRectEdgeNone;



11.单点登录
客户端输入用户名和密码 向服务器提交获取token，所有的网络请求都带着token，(可以判定是否被踢掉，但不是立即退出)

将devcicetoken + userid 传送给服务器，当用户名再次登录时候，就可以发送推送(缺点:jpush不及时，不稳定)

     这套单点登录依赖于OpenId的传递，其验证的基础在于OpenId的存储以及发送。
　　　1、当用户第一次登录时，将用户名密码发送给验证服务；
　　　2、验证服务将用户标识OpenId返回到客户端；
　　  3、客户端进行存储；
　　　4、访问子系统时，将OpenId发送到子系统；
　　　5、子系统将OpenId转发到验证服务；
　　　6、验证服务将用户认证信息返回给子系统；
　　　7、子系统构建用户验证信息后将授权后的内容返回给客户端。






